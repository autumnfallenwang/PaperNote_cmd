2016-11-11

00:10
1，insert()函数的基本功能编写完成，测试成功。
2, 下一步需要继续编写insert()函数，加入创建目录，移动文件，添加link。同时需要一个小函数，在'ID'前面添加足够的0。
3, 为了搜索方便，考虑添加key:'tag'

23:24
1, insert()函数link相关功能添加完成，测试成功，ID前已加0，加入了key值:'tag',类型list。
2, 下一步需要编写添加comment和tag内容的函数。编一个总的modify()函数，执行modify命令。但是这一条现在没想好，感觉可以套用insert()函数，尤其是.bib文件，观察bib文件的条目设置方式，测试添加条目的可能性，看是否能解析，不能的话自己编一个解析工具？
3, insert()插入成功后应该有一个本条目的全显示。
4, 需要一个remove()函数，清空条目内容，ID值置为特殊值-1？，删除相应目录，但所占的顺序值不变。这个函数不着急写。
5, 所有命令成功执行后都要有提示信息。

2016-11-12

23:26
1, 添加comment，tag以及修改条目内容的函数modify已经完成，测试成功。
2, 可以开始编写remove函数了，主要是为下面的工作做准备。
3, 两个主要功能，show和search，首先考虑清楚show的主要功能和命令格式，然后调整insert的命令格式使之统一。show的意义非常重大，因为要嵌套进其它函数中使用。
4, search函数应该可以搜索不同Key值中全部存储的关键字，如title,author,comment,keyword,tag(所以tag的list存储形式究竟还有没有必要，暂时还没想清楚)以及最终的pdf中的内容，需要字符串匹配。

2016-11-14

04:04
1, 添加了部分注释，初步添加了命令执行成功的提示信息，添加了remove函数，测试成功。

2016-11-15
1, 完成了show(item, ID)函数，其中item和ID均为';'分隔的字符串，测试成功。
2, 下一步，重点内容，需要编写输入命令系统，即command函数，这一部分负责处理输入命令的各种形式，缺省（此处处理缺省的话，insert函数就可以修改一下输入了），缩写，以及输入合法性检测（关于输入非法的报错，是集中在这个函数里还是分散到各个命令中，还没想好，但现在各命令已包含一部分报错提示），完成了command函数后，理论上这个程序基本功能已经完备，已经可以使用了，后面添加的search，help等命令只是在功能上的扩展。

2016-11-16

00:34
1, 完成command函数的insert,modify,remove部分，目前将输入合法性检测分散在了各函数中，目的是为了不重复读取数据库，缺点是有些函数可能会出现一些相似的复杂性，例如check(ID)，也有完美的办法解决，但是对程序框架影响太大，目前先这样。
2, 下一步编写command的show命令部分，一些缺省，集合的命令模式需要考虑。

6:00
1, 重构了command函数的if else逻辑，添加了一些输入提示，show部分的ID = 'all'部分还没写完，此处需要一个读data文件夹的函数，但是这个函数的功能有些强大，可以检测输入ID的合法性，以及获取大部分head信息内容，现在还没想好是否大肆利用这个函数，暂时决定谨慎使用。

18:16
1, show命令的ID = 'all'部分已经完成，测试成功。
2, command函数编写完毕，则PaperNote的最初版已经实现，将主程序改名为PN.py。
3, 在使用之前添加初步的search命令，然后进入实用阶段，后面逐步完善search，以及添加其他功能。

2016-11-17
17:09

1, PaperNote现已实现['insert', 'modify', 'remove', 'show', 'search']等基本命令，可以处理中文字符，已在linux和windows系统上成功运行，进入实用阶段。现将文件夹更名为PaperNote 1.0，将原数据库文件和文件夹更名为dbBeta.pkl，dataBeta，用作调试使用，新建db.pkl和/data。

2, 需要一个alltag命令来显示所有（不重复计算）的tag集合。

2016-11-28
17:10

1, 现在看来确实需要一个tag命令，用来显示tag集合，既然以后大部分是基于tag进行搜索操作，将tag设为一个单独的命令也未尝不可，目前想不到其他输入项，使用单独一个tag命令进行显示即可。

2, 还是需要GUI界面，不论是显示还是操作性，都比命令行要好很多。

20:11
1, 已添加tag命令，windows测试成功。版本号改为1.01。